#!/usr/bin/env python3
"""
ðŸ“š doks: Automatically create READMEs from your project ðŸ“š
====================================================================

Reads the comments from your file and puts them into a servicable .rst
file.

Very suitable for single-file Python libraries that want to keep the code
and documentation in sync without issues

USAGE
-------

.. code-block:: bash

    doks my_file.py [README.rst]

"""
from . import shields
from . import variables
from readme_renderer import rst
import datetime
import impall
import inspect
import io
import os
import sys

__all__ = ('doks',)


def doks(source, target=None):
    """Print documentation for a file or module

    ARGUMENTS
      path
        path to the Python file or module.

      target
        path to the output file or ``None``, in which case
        output is printed to stdout

    """
    lines = '\n'.join(_doks(source))
    out = io.StringIO()
    actual = rst.render(lines, out)
    if actual is None:
        print('.rst Rendering error!', out.getvalue(), '', sep='\n')
        lines = lines.splitlines()
        fmt = '%0{}d:'.format(len(str(1 + len(lines))))
        for i, line in enumerate(lines):
            print(fmt % (i + 1), line)
        sys.exit(-1)

    if target:
        with open(target, 'w') as fp:
            fp.write(lines)
    else:
        print(lines)


def _main():
    doks(*sys.argv[1:])


def _timestamp():
    return datetime.datetime.now().isoformat()


def _doks(path):
    module = impall.import_file(path)
    module_doc = _get_doc(module)

    def_vars = variables.default_variables(path)
    yield from shields.add_shields(module_doc, def_vars)
    yield ''
    yield from _header('API', '*')

    items = getattr(module, '__all__', vars(module))

    for path, value in _children(module, items, module.__name__):
        if isinstance(value, type):
            header = 'Class ``%s``' % path
            char = '='
        else:
            header = '``%s%s``' % (path, inspect.signature(value))
            char = '-'
        yield from _header(header, char)
        yield from ('    ' + i if i.strip() else i for i in _get_doc(value))
        yield ''

    yield '(automatically generated by doks on %s)' % _timestamp()


def _get_doc(s):
    lines = (s.__doc__ or '').splitlines()
    while lines and not lines[-1].strip():
        lines.pop()

    while lines and not lines[0].strip():
        lines.pop(0)

    prefix = os.path.commonprefix([i for i in lines if i.strip()])
    blanks = len(prefix) - len(prefix.lstrip())
    return [i[blanks:] for i in lines]


def _header(line, char='-'):
    header = char * len(line)
    if char in '#':
        yield header
    yield from (line, header, '')


def _children(parent, names, module_path):
    for name in names:
        if not name.startswith('_') or name.startswith('__'):
            value = getattr(parent, name)
            if callable(value):
                path = '%s.%s' % (module_path, name)
                yield path, value

                if isinstance(value, type):
                    yield from _children(value, vars(value), path)


if __name__ == '__main__':
    _main()
